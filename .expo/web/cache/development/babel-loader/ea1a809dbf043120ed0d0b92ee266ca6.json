{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar _reactNativeGoogleSignin = require(\"react-native-google-signin\");\n\nvar _jsxFileName = \"/home/bharat/Desktop/talkon/components/Auth/SignUp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n_reactNativeGoogleSignin.GoogleSignin.configure({\n  webClientId: '1012232950908-2s7984ai8mif0j91h8in3uv93v926cdt.apps.googleusercontent.com'\n});\n\nvar GLogin = function (_React$Component) {\n  (0, _inherits2.default)(GLogin, _React$Component);\n\n  var _super = _createSuper(GLogin);\n\n  function GLogin() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, GLogin);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onGoogleButtonPress = function _callee() {\n      var _await$GoogleSignin$s, idToken, googleCredential;\n\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_reactNativeGoogleSignin.GoogleSignin.signIn());\n\n            case 2:\n              _await$GoogleSignin$s = _context.sent;\n              idToken = _await$GoogleSignin$s.idToken;\n              googleCredential = auth.GoogleAuthProvider.credential(idToken);\n              return _context.abrupt(\"return\", firebase.auth().signInWithCredential(googleCredential));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(GLogin, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(_reactNative.View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, React.createElement(_reactNative.Button, {\n        title: \"Google Sign-In\",\n        onPress: function onPress() {\n          return _this2.onGoogleButtonPress().then(function () {\n            return console.log('Signed in with Google!');\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n  return GLogin;\n}(React.Component);\n\nexports.default = GLogin;","map":{"version":3,"sources":["/home/bharat/Desktop/talkon/components/Auth/SignUp.js"],"names":["GoogleSignin","configure","webClientId","GLogin","onGoogleButtonPress","signIn","idToken","googleCredential","auth","GoogleAuthProvider","credential","firebase","signInWithCredential","flex","then","console","log","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,sCAAaC,SAAb,CAAuB;AACrBC,EAAAA,WAAW,EAAE;AADQ,CAAvB;;IAIqBC,M;;;;;;;;;;;;;;;;UAElBC,mB,GAAqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAGUJ,sCAAaK,MAAb,EAHV;;AAAA;AAAA;AAGRC,cAAAA,OAHQ,yBAGRA,OAHQ;AAMVC,cAAAA,gBANU,GAMSC,IAAI,CAACC,kBAAL,CAAwBC,UAAxB,CAAmCJ,OAAnC,CANT;AAAA,+CASTK,QAAQ,CAACH,IAAT,GAAgBI,oBAAhB,CAAqCL,gBAArC,CATS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAaZ;AAAA;;AACJ,aACI,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAACM,UAAAA,IAAI,EAAC;AAAN,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,mBAAD;AACN,QAAA,KAAK,EAAC,gBADA;AAEN,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACT,mBAAL,GAA2BU,IAA3B,CAAgC;AAAA,mBAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,WAAhC,CAAN;AAAA,SAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADJ;AAQH;;;EAxB+BC,KAAK,CAACC,S","sourcesContent":["import * as React from 'react'\nimport {View, Button ,TextInput ,StyleSheet } from 'react-native'\nimport * as firebase from 'firebase'\nimport { GoogleSignin } from 'react-native-google-signin';\n\nGoogleSignin.configure({\n  webClientId: '1012232950908-2s7984ai8mif0j91h8in3uv93v926cdt.apps.googleusercontent.com',\n});\n\nexport default class GLogin extends React.Component{\n\n   onGoogleButtonPress= async () =>{\n \n        // Get the users ID token\n        const { idToken } = await GoogleSignin.signIn();\n      \n        // Create a Google credential with the token\n        const googleCredential = auth.GoogleAuthProvider.credential(idToken);\n      \n        // Sign-in the user with the credential\n        return firebase.auth().signInWithCredential(googleCredential);\n      }\n\n\n    render(){\n        return(\n            <View style={{flex:1}}> \n            <Button\n      title=\"Google Sign-In\"\n      onPress={() => this.onGoogleButtonPress().then(() => console.log('Signed in with Google!'))}\n    />\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"script"}